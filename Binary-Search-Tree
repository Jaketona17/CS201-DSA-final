// Java program to create Binary Search Tree 

  

class Node { 

    int key; 

    Node left, right; 

  

    public Node(int item) { 

        key = item; 

        left = right = null; 

    } 

} 

  

class BinarySearchTree { 

    Node root; 

  

    public BinarySearchTree() { 

        root = null; 

    } 

  

    // Code to allow user to Add new nodes to tree 

    void insert(int key) { 

        root = insert(root, key); 

    } 

  

// Function to insert a new node with the given key 

    Node insert(Node root, int key) { 

// If the tree is empty this will return a new node 

        if (root == null) { 

            root = new Node(key); 

            return root; 

        } 

  

// Recurs down the tree 

        if (key < root.key) 

            root.left = insertRec(root.left, key); 

        else if (key > root.key) 

            root.right = insertRec(root.right, key); 

  

        return root; 

    } 

  

    // Code to allow user to Delete nodes from tree 

    void deleteNode(int key) { 

        root = deleteNode(root, key); 

    } 

  

    Node deleteNode(Node root, int key) { 

        if (root == null) 

            return root; 

 

 // If key that needs to be searched is in a subtree 

        if (key < root.key) 

            root.left = deleteNode(root.left, key); 

        else if (key > root.key) 

            root.right = deleteNode(root.right, key); 

        else { 

 

// If root has 0 children or only right child 

            if (root.left == null) 

                return root.right; 

 

// If root has only left child 

            else if (root.right == null) 

                return root.left; 

  

            root.key = minValue(root.right); 

  

            root.right = deleteNode(root.right, root.key); 

        } 

  

        return root; 

    } 

  

    int minValue(Node root) { 

        int minv = root.key; 

        while (root.left != null) { 

            minv = root.left.key; 

            root = root.left; 

        } 

        return minv; 

    } 

  

       // Code for Inorder traversal 

    void inorder() { 

        inorderRec(root); 

        System.out.println("\n"); 

    } 

  

    void inorderRec(Node root) { 

        if (root != null) { 

            inorderRec(root.left); 

            System.out.print(root.key + " "); 

            inorderRec(root.right); 

        } 

    } 

  

    // Code for Preorder traversal 

    void preorder() { 

        preorderRec(root); 

        System.out.println("\n"); 

         

    } 

  

    void preorderRec(Node root) { 

        if (root != null) { 

            System.out.print(root.key + " "); 

            preorderRec(root.left); 

            preorderRec(root.right); 

        } 

    } 

  

    // Code for Postorder traversal 

    void postorder() { 

        postorderRec(root); 

        System.out.println("\n"); 

    } 

  

    void postorder(Node root) { 

        if (root != null) { 

            postorder(root.left); 

            postorder(root.right); 

            System.out.print(root.key + " "); 

        } 

    } 

  

} 

  

// Driver Class to store function 

public class Main{ 

      // Main Function to create new BST 

    public static void main(String[] args) { 

        BinarySearchTree tree = new BinarySearchTree(); 

  

        // Inserting elements into the BST 

        tree.insert(4); 

        tree.insert(2); 

        tree.insert(1); 

        tree.insert(3); 

        tree.insert(6); 

        tree.insert(5); 

        tree.insert(7); 

  

// to Delete elements 

tree.delete(); 

 

// to view the tree Inorder 

tree.inorder(); 

Output: 1 2 3 4 5 6 7  

 

 // to view the tree in Preorder 

tree.preorder(); 

Output: 1 3 2 5 7 6 4 

 

 // to view the tree in Postorder 

tree.postorder(); 

Output: 4 2 1 3 6 5 7 

